<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user.mybatis">
	<!-- 회원가입 -->
	<insert id="insertUser" parameterType="User">
		insert into story_user(num, email, pwd, name, tel, birth, filename, filesize, cdate, p_level, sort_option, ip) 
		values(#{num}, #{email}, #{pwd}, #{name}, #{tel}, #{birth}, #{filename}, #{filesize}, sysdate, #{p_level}, #{sort_option}, #{ip})
	</insert>
	
	<!-- 회원가입시 순번 계산 (시퀸스) -->
	<select id="getNextUserNumber" resultType="int">
		select story_userSer.nextval from dual
	</select>
	
	<!-- 로그인시 유효성 체크 -->
	<select id="loginCheck" parameterType="hashmap" resultType="User">
		select pwd from story_user where email=#{email}
	</select>
	
	<!-- 회원가입 중복확인 -->
	<select id="confirmEmail" parameterType="hashmap" resultType="map">
		select email from story_user where email=#{email}
	</select>
	
	<!-- 회원정보 가져오기 (이메일) -->
	<select id="getUser1" parameterType="hashmap" resultType="User">
		select * from story_user WHERE email = #{email}
	</select>
	
	<!-- 회원정보 가져오기 (이메일 & 비번) -->
	<select id="getUser2" parameterType="hashmap" resultType="User">
		select * from story_user where email = #{email} and pwd = #{pwd}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateUser" parameterType="User">
		update story_user set pwd=#{pwd}, name=#{name}, tel=#{tel}, birth=#{birth}, filename=#{filename}, 
		filesize=#{filesize}, sort_option=#{sort_option} where email=#{email}	
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteUser" parameterType="hashmap">
		delete from story_user where email=#{email} and pwd=#{pwd}	
	</delete>
	
	<!-- 회원 탈퇴 시 일기도 삭제 -->
	<delete id="deleteUser_diary" parameterType="hashmap">
		delete from story_diary where user_email = #{email}
	</delete>
	
	<!-- [어드민] 유저 수 -->
	<select id="getUserCount" resultType="int">
		SELECT nvl(count(*),0) FROM story_user where p_level != 3
	</select>
	
	<!-- [어드민] 유저 리스트 출력 -->
	<select id="getUsers" parameterType="hashmap" resultType="User">
		select * from (select rownum rnum, a.* from (select num, email, pwd, name, tel, birth, filename, cdate, p_level, ip from story_user where p_level != 3 order by cdate desc)a) 
		where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- [어드민] 회원 삭제 -->
	<delete id="deleteUser_admin" parameterType="hashmap">
		delete from story_user where email=#{email}	
	</delete>
	
	<!-- 파일 X - 테스트  -->
	<!-- <update id="updateUser" parameterType="User">
		update story_user set pwd=#{pwd}, name=#{name}, tel=#{tel}, birth=#{birth} where email=#{email}	
	</update> -->
	<!--  --><!--  -->
	
	
</mapper>